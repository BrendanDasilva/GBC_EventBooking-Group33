#  docker-compose -p a2-comp3095 -f docker-compose-single.yml up -d
# -- This command will start the containers in detached mode without rebuilding the images
#  docker-compose -p a2-comp3095 -f docker-compose-single.yml up -d --build
# -- This command forces the rebuild of images, even if the images already exist, before starting the containers
# external:internal in containerized environment communication is done using the internal port
# your application-docker.properties utilizes the internal port and the container name
# host.docker.internal
# docker rm $(docker ps -aq) - to remove conflicts with ports and container names
# docker rmi -f $(docker images -q) - to remove conflicts with ports and container names

version: '3.9'
services:

  # UserService
  user-service:
    image: user-service
    build:
      context: ./user-service
      dockerfile: ./Dockerfile
    ports:
      - "8090:8090"
    environment:
        - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-user:5432/user-service
        - SPRING_DATASOURCE_USERNAME=admin
        - SPRING_DATASOURCE_PASSWORD=password
        - SPRING_JPA_HIBERNATE_DDL_AUTO=none
        - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - postgres-user
    networks:
      - app_network

  # PostgresSQL for UserService
  postgres-user:
    image: postgres:latest
    container_name: postgres-user
    environment:
        POSTGRES_USER: admin
        POSTGRES_PASSWORD: password
        POSTGRES_DB: user-service
        PGDATA: /data/postgres
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres/users:/var/lib/postgresql/data
      - ./init/postgres/user/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app_network

  # RoomService
  room-service:
    image: room-service
    build:
      context: ./room-service
      dockerfile: ./Dockerfile
    ports:
      - "8091:8091"
    container_name: room-service
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-room:5432/room-service
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_JPA_HIBERNATE_DDL_AUTO=none
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - postgres-room
    networks:
      - app_network

  # PostgreSQL for RoomService
  postgres-room:
    image: postgres:latest
    container_name: postgres-room
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: room-service
      PGDATA: /data/postgres
    ports:
      - "5434:5432"
    volumes:
      - ./data/postgres/rooms:/var/lib/postgresql/data
      - ./init/postgres/room/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app_network

  # pgAdmin
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: user@domain.ca
      PGADMIN_DEFAULT_PASSWORD: password
    ports:
      - "8888:80"
    networks:
      - app_network

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - ./data/mongo:/data/db
      - ./init/mongo/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - app_network

  mongo-express:
    image: mongo-express
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb
    container_name: mongo-express
    depends_on:
      - mongodb
    networks:
      - app_network

  # EventService
  event-service:
    image: event-service
    build:
      context: ./event-service
      dockerfile: ./Dockerfile
    ports:
      - "8092:8092"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - mongodb
    networks:
      - app_network

  # BookingService
  booking-service:
    image: booking-service
    build:
      context: ./booking-service
      dockerfile: ./Dockerfile
    ports:
      - "8093:8093"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - mongodb
    networks:
      - app_network

  # ApprovalService
  approval-service:
    image: approval-service
    ports:
      - "8094:8094"
    build:
      context: ./approval-service
      dockerfile: ./Dockerfile
    container_name: approval-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - mongodb
    networks:
      - app_network

volumes:
  mongo-db:
    driver: local

networks:
  app_network:
    driver: bridge