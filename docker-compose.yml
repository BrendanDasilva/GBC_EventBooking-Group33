version: '3.8'
services:
  # PostgresSQL for UserService
  user-db:
    image: postgres:latest
    container_name: user_db
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: user-service
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres/users:/var/lib/postgresql/data
    networks:
      - app_network

  # PostgreSQL for RoomService
  room-db:
    image: postgres:latest
    container_name: room_db
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: room-service
    ports:
      - "5433:5432"
    volumes:
      - ./data/postgres/rooms:/var/lib/postgresql/data
    networks:
      - app_network

  # MongoDB for EventService
  event-db:
    image: mongo:latest
    container_name: event_db
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./data/mongo/events:/data/db
      - ./init/mongo/docker-entrypoint-initdb.d/event-init.js:/docker-entrypoint-initdb.d/event-init.js
    ports:
      - "27018:27017"
    networks:
      - app_network

  #MongoDB for ApprovalService
  approval-db:
    image: mongo:latest
    container_name: approval_db
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./data/mongo/approvals:/data/db
    ports:
      - "27019:27017"
    networks:
      - app_network

  # MongoDB for BookingService
  booking-db:
    image: mongo:latest
    container_name: booking_db
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./data/mongo/bookings:/data/db
      - ./init/mongo/docker-entrypoint-initdb.d/booking-init.js:/docker-entrypoint-initdb.d/booking-init.js
    ports:
      - "27017:27017"
    networks:
      - app_network

  # pgAdmin
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin_app
    environment:
      PGADMIN_DEFAULT_EMAIL: user@domain.ca
      PGADMIN_DEFAULT_PASSWORD: password
    ports:
      - "8889:80"
    networks:
      - app_network

  # UserService
  user-service:
    image: user-service
    build:
      context: ./user-service
      dockerfile: Dockerfile
    ports:
      - "8090:8090"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - user-db
    networks:
      - app_network

  # RoomService
  room-service:
    image: room-service
    build:
      context: ./room-service
      dockerfile: Dockerfile
    ports:
      - "8091:8091"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - room-db
    networks:
      - app_network

  # EventService
  event-service:
    image: event-service
    build:
      context: ./event-service
      dockerfile: Dockerfile
    ports:
      - "8092:8092"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - event-db
    networks:
      - app_network

  # BookingService
  booking-service:
    image: booking-service
    build:
      context: ./booking-service
      dockerfile: Dockerfile
    ports:
      - "8093:8093"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - booking-db
    networks:
      - app_network

  # ApprovalService
  approval-service:
    image: approval-service
    ports:
      - "8094:8094"
    build:
      context: ./approval-service
      dockerfile: Dockerfile
    container_name: approval-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - approval-db
    networks:
      - app_network

  # Mongo Express for all Services
  mongo-express:
    image: mongo-express
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=approval-db
      - ME_CONFIG_MONGODB_URL_event_db=mongodb://admin:password@event-db:27017
      - ME_CONFIG_MONGODB_URL_booking_db=mongodb://admin:password@booking-db:27017
    container_name: mongo_express_pkg
    depends_on:
      - approval-db
      - event-db
      - booking-db
    networks:
      - app_network

networks:
  app_network:
    driver: bridge